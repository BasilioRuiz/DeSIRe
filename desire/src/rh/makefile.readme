
epm - 16 Abril 2019

## -m64: Make the "double" data type be 64 bits.

Question:

1) Is -march=native identical to -march=core2? Will they produce identical code
for me?

2) Does -march=[native|core2] imply -m64 or is -m64 just a generic sort of
thing, for non-specific CPU's when no -march is specified?

Do I need to specify -m64 at all? Maybe my GCC + CPU will = CPU-optimized
64 bit code by default, just by specifying the -march flag??

To make selection of the best method simple, consider the following possible
combinations, noting the order of the flags. Is Any particular one of these
methods going to be "the best" for me?

t) gcc -march=core2
u) gcc -march=native
v) gcc -m64
w) gcc -march=native -m64
x) gcc -march=core2 -m64
y) gcc -m64 -march=native
z) gcc -m64 -march=core2

Answer:

1) GCC 4.2 introduces a new -march option, -march=native, which automatically
detects the features your CPU supports and sets the options appropriately. If
you have an Intel or AMD CPU and are using >=sys-devel/gcc-4.2.3, using
-march=native is recommended. Do not use -march=native if you use distcc on
nodes with different architectures as this may produce unusable code.

So no, march=native will likely be different from march=core2. You can go ahead
and use march=native and it will work just fine, or you can use the safe cflags
as listed above and that should be fine too. march=native is a more automated
method and will likely be the best option, for the march=core2 you will need to
check to see if you can also add -msse4.1, I think march=native will autodetect
this.

2) You really never need to specify -m64, unless you are compiling a 64-bit
executable on a 32-bit system. And you only need to specify -m32 when you are
compiling a 32-bit executable on a 64-bit system.

So no, you don't need to specify -m64, in fact even without the -march flag you
still don't need it.

Probably the best thing to use is either -march=native or the safe cflags above.
